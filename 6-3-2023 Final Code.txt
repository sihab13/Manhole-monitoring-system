#define BLYNK_TEMPLATE_ID "TMPLtC2UZiFB"
#define BLYNK_TEMPLATE_NAME "Manhol Monitoring System"
#define BLYNK_AUTH_TOKEN "sOOSJKuS-eUZN5MZVpJk5wmVuXNNyQPJ"

#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include <DHT.h>

char ssid[] = "Bachelor";
char pass[] = "hp515.com";

#define DHTPIN D4     // DHT11 data pin is connected to NodeMCU D4
#define DHTTYPE DHT11 // DHT11 sensor type

DHT dht(DHTPIN, DHTTYPE);

#define TRIGGER_PIN D0 // NodeMCU pin D1 - ultrasonic sensor trigger
#define ECHO_PIN D1    // NodeMCU pin D2 - ultrasonic sensor echo

#define GAS_SENSOR A0  // analog input pin connected to MQ-2 sensor
#define LED_PIN D2     // digital output pin connected to an LED



float max_distance = 23.4; // maximum distance (in cm) of the water level from the ultrasonic sensor
float max_depth = 23.4;    // maximum depth (in cm) of the water level

BlynkTimer timer;

void setup()
{
  Serial.begin(115200);
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

  pinMode(TRIGGER_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  dht.begin();

  timer.setInterval(2000L, readSensors); // Read sensors every 2 seconds

  pinMode(GAS_SENSOR, INPUT);
  pinMode(LED_PIN, OUTPUT);
  pinMode(D5, OUTPUT);

}

void readSensors()
{
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print(" Â°C, Humidity: ");
  Serial.print(humidity);
  Serial.println(" %");

  Blynk.virtualWrite(V0, temperature); // Send temperature value to Blynk app
  Blynk.virtualWrite(V1, humidity);    // Send humidity value to Blynk app

  // Read ultrasonic sensor
  digitalWrite(TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);
  float duration = pulseIn(ECHO_PIN, HIGH);
  float distance = duration * 0.034 / 2.0;

  if (distance >= max_distance) {
    distance = max_distance;
  }

  float depth = max_distance - distance;
  float percentage_full = (depth / max_depth) * 100.0;

  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.print(" cm, Depth: ");
  Serial.print(depth);
  Serial.print(" cm, Percentage Full: ");
  Serial.print(percentage_full);
  Serial.println(" %");

  Blynk.virtualWrite(V2, distance);           // Send distance value to Blynk app
  Blynk.virtualWrite(V3, percentage_full);    // Send percentage_full value to Blynk app
  
  {
    if (percentage_full < 3) {
    Blynk.logEvent("manhol_cover","Manhol Cover is Open");
    digitalWrite(D5, HIGH);
  }
  else {
    digitalWrite(D5, LOW); // turn off LED if gas value is below 550
  }
  }

  

  int gasValue = analogRead(GAS_SENSOR);
  Serial.print("Gas value: ");
  Serial.println(gasValue);
  Blynk.virtualWrite(V4, gasValue); 
  
  if (gasValue > 400) {
    Blynk.logEvent("gas_alert","Gas Leakage Detected");
    digitalWrite(LED_PIN, HIGH); // turn on LED if gas value is above 550
  } else {
    digitalWrite(LED_PIN, LOW); // turn off LED if gas value is below 550
  }
}

void loop()
{
  Blynk.run();
  timer.run();
}
